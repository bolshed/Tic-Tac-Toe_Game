{"version":3,"sources":["serviceWorker.js","Components/Square.jsx","Components/Board.jsx","Components/Game.jsx","App.js","index.js"],"names":["Boolean","window","location","hostname","match","Square","props","className","onClick","handleClick","value","Board","i","this","squareArr","renderSquare","Component","Game","checkWinner","array","rows","length","a","b","c","setState","setWinner","state","Array","fill","nextPlayer","winningSquares","status","winner","player","every","element","App","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8NAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,8CCTSC,MAPf,SAAgBC,GAEZ,OACI,4BAAQC,UAAU,SAASC,QAASF,EAAMG,aAA1C,IAAyDH,EAAMI,QC6BxDC,E,qLA9BEC,GAAI,IAAD,OACZ,OAAQ,kBAAC,EAAD,CACJF,MAAOG,KAAKP,MAAMQ,UAAUF,GAC5BH,YAAa,kBAAM,EAAKH,MAAMG,YAAYG,Q,+BAK9C,OACI,yBAAKL,UAAU,QACX,yBAAKA,UAAU,OACVM,KAAKE,aAAa,GAClBF,KAAKE,aAAa,GAClBF,KAAKE,aAAa,IAEvB,yBAAKR,UAAU,OACVM,KAAKE,aAAa,GAClBF,KAAKE,aAAa,GAClBF,KAAKE,aAAa,IAEvB,yBAAKR,UAAU,OACVM,KAAKE,aAAa,GAClBF,KAAKE,aAAa,GAClBF,KAAKE,aAAa,S,GAzBnBC,aC+ELC,E,YA1Eb,WAAYX,GAAQ,IAAD,8BACjB,4CAAMA,KAwBRY,YAAc,SAACC,GAYb,IAXA,IAAMC,EAAO,CACX,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAGAR,EAAI,EAAGA,EAAIQ,EAAKC,OAAQT,IAAK,CAAC,IAAD,cAClBQ,EAAKR,GADa,GAC7BU,EAD6B,KAC1BC,EAD0B,KACvBC,EADuB,KAEpC,GAAIL,EAAMG,IAAMH,EAAMG,KAAOH,EAAMI,IAAMJ,EAAMG,KAAOH,EAAMK,GAI1D,OAHA,EAAKC,SAAS,CACZC,UAAWP,EAAMG,KAEZH,EAAMG,GAGjB,OAAO,MA5CP,EAAKK,MAAQ,CACXb,UAAWc,MAAM,GAAGC,KAAK,MACzBC,YAAY,EACZJ,UAAW,KACXK,eAAgB,IAND,E,yEAWPnB,GACV,IAAMO,EAAQN,KAAKc,MAAMb,UACrBK,EAAMP,IAAMC,KAAKc,MAAMD,YAI3BP,EAAMP,GAAKC,KAAKc,MAAMG,WAAa,IAAM,IACzCjB,KAAKY,SAAS,CACZX,UAAWK,EACXW,YAAajB,KAAKc,MAAMG,aAE1BjB,KAAKK,YAAYC,M,+BA2BT,IAGJa,EAHG,OACDC,EAASpB,KAAKc,MAAMD,UACpBQ,EAASrB,KAAKc,MAAMG,WAU1B,OAPEE,EADEC,EACO,wBAAI1B,UAAU,UAAd,mBAAwC0B,EAAxC,KACApB,KAAKc,MAAMb,UAAUqB,MAAM,SAAAC,GAAO,OAAIA,IACtC,wBAAI7B,UAAU,UAAd,eAEA,wBAAIA,UAAU,UAAd,oBAAyC2B,EAAS,IAAM,KAIjE,yBAAK3B,UAAU,QACb,kBAAC,EAAD,CACEE,YAAa,SAACG,GAAD,OAAO,EAAKH,YAAYG,IACrCkB,WAAYjB,KAAKc,MAAMG,WACvBhB,UAAWD,KAAKc,MAAMb,YAEvBkB,O,GArEUhB,aCIJqB,E,iLALP,OACI,kBAAC,EAAD,U,GAHMrB,a,MCKlBsB,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SLyH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,gB","file":"static/js/main.aac820a2.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\n\nfunction Square(props) {\n\n    return (\n        <button className='square' onClick={props.handleClick}> {props.value}</button>\n    )\n}\n\nexport default Square","import React, { Component } from 'react';\nimport Square from './Square';\nclass Board extends Component {\n\n    renderSquare(i) {\n        return (<Square\n            value={this.props.squareArr[i]}\n            handleClick={() => this.props.handleClick(i)} />\n        )\n    }\n\n    render() {\n        return (\n            <div className='Main'>\n                <div className=\"Row\">\n                    {this.renderSquare(0)}\n                    {this.renderSquare(1)}\n                    {this.renderSquare(2)}\n                </div>\n                <div className=\"Row\">\n                    {this.renderSquare(3)}\n                    {this.renderSquare(4)}\n                    {this.renderSquare(5)}\n                </div>\n                <div className=\"Row\">\n                    {this.renderSquare(6)}\n                    {this.renderSquare(7)}\n                    {this.renderSquare(8)}\n                </div>\n            </div >\n        )\n    }\n}\n\nexport default Board;\n","import React, { Component } from 'react';\nimport Board from './Board';\n\n\n// ======================\n\nclass Game extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      squareArr: Array(9).fill(null),\n      nextPlayer: true,\n      setWinner: null,\n      winningSquares: []\n    }\n    // this.handleClick = this.handleClick.bind(this)\n  }\n\n  handleClick(i) {\n    const array = this.state.squareArr\n    if (array[i] || this.state.setWinner) {\n      return\n    }\n\n    array[i] = this.state.nextPlayer ? \"X\" : \"O\"\n    this.setState({\n      squareArr: array,\n      nextPlayer: !this.state.nextPlayer\n    })\n    this.checkWinner(array)\n  }\n\n  checkWinner = (array) => {\n    const rows = [\n      [0, 1, 2],\n      [3, 4, 5],\n      [6, 7, 8],\n      [0, 3, 6],\n      [1, 4, 7],\n      [2, 5, 8],\n      [0, 4, 8],\n      [2, 4, 6]\n    ]\n\n    for (let i = 0; i < rows.length; i++) {\n      const [a, b, c] = rows[i]\n      if (array[a] && array[a] === array[b] && array[a] === array[c]) {\n        this.setState({\n          setWinner: array[a]\n        })\n        return array[a]\n      }\n    }\n    return null\n  }\n\n  render() {\n    const winner = this.state.setWinner\n    const player = this.state.nextPlayer\n    let status\n    if (winner) {\n      status = <h3 className=\"Winner\"> The Winner is: {winner}!</h3>\n    } else if (this.state.squareArr.every(element => element)) {\n      status = <h3 className=\"Winner\"> No winner!</h3>\n    } else {\n      status = <h3 className=\"Status\"> Next player is: {player ? 'X' : 'O'}</h3>\n    }\n\n    return (\n      <div className='Game'>\n        <Board\n          handleClick={(i) => this.handleClick(i)}\n          nextPlayer={this.state.nextPlayer}\n          squareArr={this.state.squareArr} />\n\n        {status}\n      </div>\n    )\n  }\n}\n\nexport default Game;\n","import React, { Component } from 'react';\nimport Game from './Components/Game';\n\nclass App extends Component {\n    render() {\n        return (\n            <Game />\n        )\n    }\n}\nexport default App","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport App from './App';\nimport './Style.css';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}